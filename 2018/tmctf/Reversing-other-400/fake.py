#!/usr/bin/env python


def verify_flag( inval ):
    inval
    c = 0
    l = 'TMCTF{'
    s = '}'
    sdl = 1
    x = -1
    ROFL = 7
    KYRYK = 5
    QQRTQ = 'ReadEaring'
    KYRYJ = 'adEa'
    QQRTW = 'dHer'
    KYRYH = 24
    QQRTE = 9
    KYRYG = 'h'
    QQRTR = 255
    KYRYF = 8
    QQRTY = 32
    i = ''
    j = 'R) +6'
    ary = 'l1:C('
    c = ' RP%A'
    c = 236
    c = 108
    c = 102
    c = 169
    c = 93
    c = ' L30Z'
    c = 'X2'
    c = ' j36~'
    c = 's2'
    c = ' M2S+'
    c = 'X3'
    c = '4e\x9c{E'
    c = 'S3'
    c = '6!2$D'
    c = 'X4'
    c = ']PaSs'
    c = 'S4'
    c = 10
    c,c,c,c,c = 236, 108, 102, 169, 93
    c = True
    c = ''.title()
    len(c)
    c = False
    c = ''.startswith( '' )
    c = ''.endswith( '' )
    c = ''.replace( 'h' , '' )
    c = ''.split()
    c = ''.rsplit()
    AssertionError
    c = map( ord , '' )
    c = sum( [] )
    c = chr( 10 )
    c = list( '' )
    c = reversed( '' )
    c = xrange( 10 )
    c = ''.join( [] )
    ValueError
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    c = tuple()
    len(c)
    len(c)
    return

print verify_flag.__code__.co_consts
print verify_flag.__code__.co_varnames
print verify_flag.__code__.co_names
print len( verify_flag.__code__.co_code )

o = open( 'bc_fake' , 'w+' )
o.write( verify_flag.__code__.co_code )
o.close()