# 2018.09.18 22:51:22 CST
#Embedded file name: ./fake.py


def verify_flag(inval):
    try:
        inval + 0
    except:
        for c in inval:
            c += c
        else:
            del c

    else:
        while True:
            inval += inval
        else:
            del inval

    try:
        title
    except:
        pass

    if len(inval) == 0 or False:
        return False
    if not inval.startswith('TMCTF{'):
        return False
    if not inval.endswith('}'):
        return False
        inval = inval.replace('TMCTF{')
    else:
        l = len(inval)
        inval = inval.split('TMCTF{', 1)[-1].rsplit('}', 1)[0]
        try:
            assert len(inval) + 7 == l
        except:
            return False

        10
    if inval == 'ReadEaring'.replace('adEa', 'dHer'):
        return False
    inval = map(ord, inval)
    l = len(inval)
    if l != 24:
        return False
    s = sum(inval)
    if s % l != 9:
        return False
    sdl = s / l
    if chr(sdl) != 'h':
        return False
    inval = [ x ^ sdl for x in inval ]
    ROFL = list(reversed(inval))
    KYRYK = [0] * 5
    QQRTQ = [0] * 5
    KYRYJ = [0] * 5
    QQRTW = [0] * 5
    KYRYH = [0] * 5
    QQRTE = [0] * 5
    KYRYG = [0] * 5
    QQRTR = [0] * 5
    KYRYF = [0] * 5
    QQRTY = [0] * 5
    for i in xrange(len(KYRYK)):
        for j in xrange(len(QQRTQ) - 1):
            KYRYK[i] ^= inval[i + j]
            if QQRTQ[i] + inval[i + j] > 255:
                return False
            QQRTQ[i] += inval[i + j]
            KYRYJ[i] ^= inval[i * j]
            if QQRTW[i] + inval[i * j] > 255:
                return False
            QQRTW[i] += inval[i * j]
            KYRYH[i] ^= inval[8 + i * j]
            if QQRTE[i] + inval[8 + i * j] > 255:
                return False
            QQRTE[i] += inval[8 + i * j]
            KYRYG[i] ^= ROFL[8 + i * j]
            if QQRTR[i] + ROFL[8 + i * j] > 255:
                return False
            QQRTR[i] += ROFL[8 + i * j]
            KYRYF[i] ^= ROFL[i + j]
            if QQRTY[i] + ROFL[i + j] > 255:
                return False
            QQRTY[i] += ROFL[i + j]

        KYRYK[i] += 32
        KYRYJ[i] += 32
        KYRYH[i] += 32
        KYRYG[i] += 32
        KYRYF[i] += 32
        QQRTE[i] += 8
        QQRTY[i] += 1

    for ary in [KYRYK,
     KYRYJ,
     KYRYH,
     KYRYG,
     KYRYF,
     QQRTW,
     QQRTE,
     QQRTR,
     QQRTY]:
        for x in ary:
            if x > 255:
                return False

    if ''.join(map(chr, KYRYK)) != 'R) +6':
        return False
    try:
        if ''.join(map(chr, QQRTQ)) != 'l1:C(':
            return False
    except ValueError:
        return False

    if ''.join(map(chr, KYRYJ)) != ' RP%A':
        return False
    if tuple(QQRTW) != (236, 108, 102, 169, 93):
        return False
    if ''.join(map(chr, KYRYH)) != ' L30Z':
        print 'X2',
        print
        return False
    if ''.join(map(chr, QQRTE)) != ' j36~':
        print 's2'
        return False
    if ''.join(map(chr, KYRYG)) != ' M2S+':
        print 'X3'
        return False
    if ''.join(map(chr, QQRTR)) != '4e\x9c{E':
        print 'S3',
        print
        return False
    if ''.join(map(chr, KYRYF)) != '6!2$D':
        print 'X4'
        return False
    if ''.join(map(chr, QQRTY)) != ']PaSs':
        print 'S4'
        return False
    return True


a = ['co_argcount',
 'co_cellvars',
 'co_code',
 'co_consts',
 'co_filename',
 'co_firstlineno',
 'co_flags',
 'co_freevars',
 'co_lnotab',
 'co_name',
 'co_names',
 'co_nlocals',
 'co_stacksize',
 'co_varnames']
print verify_flag.__code__.co_consts
print verify_flag.__code__.co_varnames
print verify_flag.__code__.co_names
print len(verify_flag.__code__.co_code)
o = open('bc_fake', 'w+')
o.write(verify_flag.__code__.co_code)
o.close()
#+++ okay decompyling ./lab/out.pyc
# decompiled 1 files: 1 okay, 0 failed, 0 verify failed
# 2018.09.18 22:51:23 CST